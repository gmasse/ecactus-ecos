{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"Reference","text":"<p>Top-level module for importing the Ecos class.</p>"},{"location":"api/#ecactus.AsyncEcos","title":"<code>AsyncEcos(datacenter=None, url=None, access_token=None, refresh_token=None)</code>","text":"<p>Asynchronous ECOS API client class.</p> <p>This class provides methods for interacting with the ECOS API, including authentication, retrieving user information, and managing homes. It uses the <code>aiohttp</code> library to make asynchonous HTTP requests to the API.</p> <p>Initialize a session with ECOS API.</p> <p>Parameters:</p> Name Type Description Default <code>datacenter</code> <code>Optional[str]</code> <p>The location of the ECOS API datacenter. Can be one of <code>CN</code>, <code>EU</code>, or <code>AU</code>. If not specified and <code>url</code> is not provided, a <code>ValueError</code> is raised.</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>The URL of the ECOS API. If specified, <code>datacenter</code> is ignored.</p> <code>None</code> <code>access_token</code> <code>Optional[str]</code> <p>The access token for authentication with the ECOS API.</p> <code>None</code> <code>refresh_token</code> <code>Optional[str]</code> <p>The refresh token for authentication with the ECOS API.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>datacenter</code> is not one of <code>CN</code>, <code>EU</code>, or <code>AU</code> and <code>url</code> is not provided.</p> Source code in <code>src/ecactus/_base.py</code> <pre><code>def __init__(\n    self,\n    datacenter: str | None = None,\n    url: str | None = None,\n    access_token: str | None = None,\n    refresh_token: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize a session with ECOS API.\n\n    Args:\n        datacenter (Optional[str]): The location of the ECOS API datacenter.\n            Can be one of `CN`, `EU`, or `AU`. If not specified and `url` is not provided,\n            a `ValueError` is raised.\n        url (Optional[str]): The URL of the ECOS API. If specified, `datacenter` is ignored.\n        access_token (Optional[str]): The access token for authentication with the ECOS API.\n        refresh_token (Optional[str]): The refresh token for authentication with the ECOS API.\n\n    Raises:\n        ValueError: If `datacenter` is not one of `CN`, `EU`, or `AU` and `url` is not provided.\n\n    \"\"\"\n    logger.info(\"Initializing session\")\n    self.access_token = access_token\n    self.refresh_token = refresh_token\n    # TODO: get datacenters from https://dcdn-config.weiheng-tech.com/prod/config.json\n    datacenters = {\n        \"CN\": \"https://api-ecos-hu.weiheng-tech.com\",\n        \"EU\": \"https://api-ecos-eu.weiheng-tech.com\",\n        \"AU\": \"https://api-ecos-au.weiheng-tech.com\",\n    }\n    if url is None:\n        if datacenter is None:\n            raise ValueError(\"url or datacenter not specified\")\n        if datacenter not in datacenters:\n            raise ValueError(\n                \"datacenter must be one of {}\".format(\", \".join(datacenters.keys()))\n            )\n        self.url = datacenters[datacenter]\n    else:  # url specified, ignore datacenter\n        self.url = url.rstrip(\"/\")  # remove trailing / from url\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.login","title":"<code>login(email, password)</code>  <code>async</code>","text":"<p>Authenticate with the ECOS API using a provided email and password.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The user's email to use for authentication.</p> required <code>password</code> <code>str</code> <p>The user's password to use for authentication.</p> required Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def login(self, email: str, password: str) -&gt; None:\n    \"\"\"Authenticate with the ECOS API using a provided email and password.\n\n    Args:\n        email (str): The user's email to use for authentication.\n        password (str): The user's password to use for authentication.\n\n    \"\"\"\n    logger.info(\"Login\")\n    payload = {\n        \"_t\": int(time.time()),\n        \"clientType\": \"BROWSER\",\n        \"clientVersion\": \"1.0\",\n        \"email\": email,\n        \"password\": password,\n    }\n    data = await self._post(\"/api/client/guide/login\", payload=payload)\n    self.access_token = data[\"accessToken\"]\n    self.refresh_token = data[\"refreshToken\"]\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_user_info","title":"<code>get_user_info()</code>  <code>async</code>","text":"<p>Get user details.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>Details concerning the user. Example: <pre><code>{\n    \"username\": \"john.doe@acme.com\",\n    \"nickname\": \"JohnD\",\n    \"email\": \"john.doe@acme.com\",\n    \"phone\": \"\",\n    \"timeZoneId\": \"209\",\n    \"timeZone\": \"GMT-05:00\",\n    \"timezoneName\": \"America/Toronto\",\n    \"datacenterPhoneCode\": 49,\n    \"datacenter\": \"EU\",\n    \"datacenterHost\": \"https://api-ecos-eu.weiheng-tech.com\"\n}\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_user_info(self) -&gt; JSON:\n    \"\"\"Get user details.\n\n    Returns:\n        Details concerning the user. Example:\n            ``` py\n            {\n                \"username\": \"john.doe@acme.com\",\n                \"nickname\": \"JohnD\",\n                \"email\": \"john.doe@acme.com\",\n                \"phone\": \"\",\n                \"timeZoneId\": \"209\",\n                \"timeZone\": \"GMT-05:00\",\n                \"timezoneName\": \"America/Toronto\",\n                \"datacenterPhoneCode\": 49,\n                \"datacenter\": \"EU\",\n                \"datacenterHost\": \"https://api-ecos-eu.weiheng-tech.com\"\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get user info\")\n    return await self._get(\"/api/client/settings/user/info\")\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_homes","title":"<code>get_homes()</code>  <code>async</code>","text":"<p>Get a list of homes.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>A list of homes. Example: <pre><code>[\n    {\n        \"homeId\": \"1234567890123456789\",\n        \"homeName\": \"SHARED_DEVICES\",\n        \"homeType\": 0,\n        \"longitude\": None,\n        \"latitude\": None,\n        \"homeDeviceNumber\": 1,\n        \"relationType\": 1,\n        \"createTime\": 946684800000,\n        \"updateTime\": 946684800000,\n    },\n    {\n        \"homeId\": \"9876543210987654321\",\n        \"homeName\": \"My Home\",\n        \"homeType\": 1,\n        \"longitude\": None,\n        \"latitude\": None,\n        \"homeDeviceNumber\": 0,\n        \"relationType\": 1,\n        \"createTime\": 946684800000,\n        \"updateTime\": 946684800000,\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_homes(self) -&gt; JSON:\n    \"\"\"Get a list of homes.\n\n    Returns:\n        A list of homes. Example:\n            ``` py\n            [\n                {\n                    \"homeId\": \"1234567890123456789\",\n                    \"homeName\": \"SHARED_DEVICES\",\n                    \"homeType\": 0,\n                    \"longitude\": None,\n                    \"latitude\": None,\n                    \"homeDeviceNumber\": 1,\n                    \"relationType\": 1,\n                    \"createTime\": 946684800000,\n                    \"updateTime\": 946684800000,\n                },\n                {\n                    \"homeId\": \"9876543210987654321\",\n                    \"homeName\": \"My Home\",\n                    \"homeType\": 1,\n                    \"longitude\": None,\n                    \"latitude\": None,\n                    \"homeDeviceNumber\": 0,\n                    \"relationType\": 1,\n                    \"createTime\": 946684800000,\n                    \"updateTime\": 946684800000,\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get home list\")\n    home_list: list[Any] = await self._get(\"/api/client/v2/home/family/query\")\n    for (\n        home\n    ) in home_list:  # force the name of the home for shared devices (homeType=0)\n        if home[\"homeType\"] == \"0\":\n            home[\"homeName\"] = \"SHARED_DEVICES\"\n    return home_list\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_devices","title":"<code>get_devices(home_id)</code>  <code>async</code>","text":"<p>Get a list of devices for a home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>int</code> <p>The home ID to get devices for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>A list of devices. Example: <pre><code>[\n    {\n        \"deviceId\": \"1234567890123456789\",\n        \"deviceAliasName\": \"My Device\",\n        \"state\": 0,\n        \"batterySoc\": 0.0,\n        \"batteryPower\": 0,\n        \"socketSwitch\": None,\n        \"chargeStationMode\": None,\n        \"vpp\": False,\n        \"type\": 1,\n        \"deviceSn\": \"SHC000000000000001\",\n        \"agentId\": \"9876543210987654321\",\n        \"lon\": 0.0,\n        \"lat\": 0.0,\n        \"deviceType\": \"XX-XXX123       \",\n        \"resourceSeriesId\": 101,\n        \"resourceTypeId\": 7,\n        \"master\": 0,\n        \"emsSoftwareVersion\": \"000-00000-00\",\n        \"dsp1SoftwareVersion\": \"111-11111-11\",\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_devices(self, home_id: int) -&gt; JSON:\n    \"\"\"Get a list of devices for a home.\n\n    Args:\n        home_id (int): The home ID to get devices for.\n\n    Returns:\n        A list of devices. Example:\n            ``` py\n            [\n                {\n                    \"deviceId\": \"1234567890123456789\",\n                    \"deviceAliasName\": \"My Device\",\n                    \"state\": 0,\n                    \"batterySoc\": 0.0,\n                    \"batteryPower\": 0,\n                    \"socketSwitch\": None,\n                    \"chargeStationMode\": None,\n                    \"vpp\": False,\n                    \"type\": 1,\n                    \"deviceSn\": \"SHC000000000000001\",\n                    \"agentId\": \"9876543210987654321\",\n                    \"lon\": 0.0,\n                    \"lat\": 0.0,\n                    \"deviceType\": \"XX-XXX123       \",\n                    \"resourceSeriesId\": 101,\n                    \"resourceTypeId\": 7,\n                    \"master\": 0,\n                    \"emsSoftwareVersion\": \"000-00000-00\",\n                    \"dsp1SoftwareVersion\": \"111-11111-11\",\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get devices for home %d\", home_id)\n    return await self._get(\n        \"/api/client/v2/home/device/query\", payload={\"homeId\": home_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_all_devices","title":"<code>get_all_devices()</code>  <code>async</code>","text":"<p>Get a list of all the devices.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>A list of devices. Example: <pre><code>[\n    {\n        \"deviceId\": \"1234567890123456789\",\n        \"deviceAliasName\": \"My Device\",\n        \"wifiSn\": \"azerty123456789azertyu\",\n        \"state\": 0,\n        \"weight\": 0,\n        \"temp\": None,\n        \"icon\": None,\n        \"vpp\": False,\n        \"master\": 0,\n        \"type\": 1,\n        \"deviceSn\": \"SHC000000000000001\",\n        \"agentId\": \"\",\n        \"lon\": 0.0,\n        \"lat\": 0.0,\n        \"category\": None,\n        \"model\": None,\n        \"deviceType\": None,\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_all_devices(self) -&gt; JSON:\n    \"\"\"Get a list of all the devices.\n\n    Returns:\n        A list of devices. Example:\n            ``` py\n            [\n                {\n                    \"deviceId\": \"1234567890123456789\",\n                    \"deviceAliasName\": \"My Device\",\n                    \"wifiSn\": \"azerty123456789azertyu\",\n                    \"state\": 0,\n                    \"weight\": 0,\n                    \"temp\": None,\n                    \"icon\": None,\n                    \"vpp\": False,\n                    \"master\": 0,\n                    \"type\": 1,\n                    \"deviceSn\": \"SHC000000000000001\",\n                    \"agentId\": \"\",\n                    \"lon\": 0.0,\n                    \"lat\": 0.0,\n                    \"category\": None,\n                    \"model\": None,\n                    \"deviceType\": None,\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get devices for every homes\")\n    return await self._get(\"/api/client/home/device/list\")\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_realtime_device_data","title":"<code>get_realtime_device_data(device_id)</code>  <code>async</code>","text":"<p>Get power metrics of the current day until now.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get power metrics for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>Multiple metrics of the current day. Example: <pre><code>{\n    \"solarPowerDps\": {\n        \"946685100\": 0.0,\n        \"946685400\": 0.0,\n        ...\n        \"946733700\": 0.0,\n    },\n    \"batteryPowerDps\": {...},\n    \"gridPowerDps\": {...},\n    \"meterPowerDps\": {...},\n    \"homePowerDps\": {...},\n    \"epsPowerDps\": {...},\n}\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_realtime_device_data(self, device_id: int) -&gt; JSON:\n    \"\"\"Get power metrics of the current day until now.\n\n    Args:\n        device_id (int): The device ID to get power metrics for.\n\n    Returns:\n        Multiple metrics of the current day. Example:\n            ``` py\n            {\n                \"solarPowerDps\": {\n                    \"946685100\": 0.0,\n                    \"946685400\": 0.0,\n                    ...\n                    \"946733700\": 0.0,\n                },\n                \"batteryPowerDps\": {...},\n                \"gridPowerDps\": {...},\n                \"meterPowerDps\": {...},\n                \"homePowerDps\": {...},\n                \"epsPowerDps\": {...},\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get current day data for device %d\", device_id)\n    return await self._post(\n        \"/api/client/home/now/device/realtime\", payload={\"deviceId\": device_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_realtime_home_data","title":"<code>get_realtime_home_data(home_id)</code>  <code>async</code>","text":"<p>Get current power for the home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>int</code> <p>The home ID to get current power for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>Power data. Example: <pre><code>{\n    \"batteryPower\": 0,\n    \"epsPower\": 0,\n    \"gridPower\": 23,\n    \"homePower\": 1118,\n    \"meterPower\": 1118,\n    \"solarPower\": 0,\n    \"chargePower\": 0,\n    \"batterySocList\": [\n        {\n            \"deviceSn\": \"SHC000000000000001\",\n            \"batterySoc\": 0.0,\n            \"sysRunMode\": 1,\n            \"isExistSolar\": True,\n            \"sysPowerConfig\": 3,\n        }\n    ],\n}\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_realtime_home_data(self, home_id: int) -&gt; JSON:\n    \"\"\"Get current power for the home.\n\n    Args:\n        home_id (int): The home ID to get current power for.\n\n    Returns:\n        Power data. Example:\n            ``` py\n            {\n                \"batteryPower\": 0,\n                \"epsPower\": 0,\n                \"gridPower\": 23,\n                \"homePower\": 1118,\n                \"meterPower\": 1118,\n                \"solarPower\": 0,\n                \"chargePower\": 0,\n                \"batterySocList\": [\n                    {\n                        \"deviceSn\": \"SHC000000000000001\",\n                        \"batterySoc\": 0.0,\n                        \"sysRunMode\": 1,\n                        \"isExistSolar\": True,\n                        \"sysPowerConfig\": 3,\n                    }\n                ],\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get realtime data for home %d\", home_id)\n    return await self._get(\n        \"/api/client/v2/home/device/runData\", payload={\"homeId\": home_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_history","title":"<code>get_history(device_id, start_date, period_type)</code>  <code>async</code>","text":"<p>Get aggregated energy for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get history for.</p> required <code>start_date</code> <code>datetime</code> <p>The start date.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: daily values of the calendar month corresponding to <code>start_date</code></li> <li><code>1</code>: today daily values (<code>start_date</code> is ignored) (?)</li> <li><code>2</code>: daily values of the current month (<code>start_date</code> is ignored)</li> <li><code>3</code>: same than 2 ?</li> <li><code>4</code>: total for the current month (<code>start_date</code> is ignored)</li> </ul> required <p>Returns:</p> Type Description <code>JSON</code> <p>Data and metrics corresponding to the defined period. Example: <pre><code>{\n    \"energyConsumption\": 1221.2,\n    \"solarPercent\": 47.0,\n    \"homeEnergyDps\": {\n        \"1733112000\": 39.6,\n        \"1733198400\": 68.1,\n        \"1733284800\": 75.3,\n        ...\n        \"1735707599\": 41.3,\n    },\n}\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_history(\n    self, device_id: int, start_date: datetime, period_type: int\n) -&gt; JSON:\n    \"\"\"Get aggregated energy for a period.\n\n    Args:\n        device_id (int): The device ID to get history for.\n        start_date (datetime): The start date.\n        period_type (int): Possible value:\n\n            - `0`: daily values of the calendar month corresponding to `start_date`\n            - `1`: today daily values (`start_date` is ignored) (?)\n            - `2`: daily values of the current month (`start_date` is ignored)\n            - `3`: same than 2 ?\n            - `4`: total for the current month (`start_date` is ignored)\n\n    Returns:\n        Data and metrics corresponding to the defined period. Example:\n            ``` py\n            {\n                \"energyConsumption\": 1221.2,\n                \"solarPercent\": 47.0,\n                \"homeEnergyDps\": {\n                    \"1733112000\": 39.6,\n                    \"1733198400\": 68.1,\n                    \"1733284800\": 75.3,\n                    ...\n                    \"1735707599\": 41.3,\n                },\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get history for device %d\", device_id)\n    start_ts = int(start_date.timestamp())\n    return await self._post(\n        \"/api/client/home/history/home\",\n        payload={\n            \"deviceId\": device_id,\n            \"timestamp\": start_ts,\n            \"periodType\": period_type,\n        },\n    )\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_insight","title":"<code>get_insight(device_id, start_date, period_type)</code>  <code>async</code>","text":"<p>Get energy metrics and statistics of a device for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get data for.</p> required <code>start_date</code> <code>datetime</code> <p>The start date.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: 5-minute power measurement for the calendar day corresponding to <code>start_date</code> (<code>insightConsumptionDataDto</code> is <code>None</code>)</li> <li><code>1</code>: (not implemented)</li> <li><code>2</code>: daily energy for the calendar month corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>3</code>: (not implemented)</li> <li><code>4</code>: monthly energy for the calendar year corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>5</code>: yearly energy, <code>start_date</code> is ignored (?) (<code>deviceRealtimeDto</code> is <code>None</code>)</li> </ul> required <p>Returns:</p> Type Description <code>JSON</code> <p>Statistics and metrics corresponding to the defined period. Example: <pre><code>{\n    \"selfPowered\": 0,\n    \"deviceRealtimeDto\": {\n        \"solarPowerDps\": {\n            \"1732129500\": 0.0,\n            \"1732129800\": 0.0,\n            ...\n            \"1732132800\": 0.0,\n        },\n        \"batteryPowerDps\": {...},\n        \"gridPowerDps\": {...},\n        \"meterPowerDps\": {...},\n        \"homePowerDps\": {...},\n        \"epsPowerDps\": {...},\n    },\n    \"deviceStatisticsDto\": {\n        \"consumptionEnergy\": 0.0,\n        \"fromBattery\": 0.0,\n        \"toBattery\": 0.0,\n        \"fromGrid\": 0.0,\n        \"toGrid\": 0.0,\n        \"fromSolar\": 0.0,\n        \"eps\": 0.0,\n    },\n    \"insightConsumptionDataDto\": {\n        \"fromBatteryDps\": {\n            \"1733976000\": 0.0,\n            \"1733889600\": 0.0,\n            ...\n            \"1734062400\": 0.0,\n        },\n        \"toBatteryDps\": {...},\n        \"fromGridDps\": {...},\n        \"toGridDps\": {...},\n        \"fromSolarDps\": {...},\n        \"homeEnergyDps\": {...},\n        \"epsDps\": {...},\n        \"selfPoweredDps\": {...},\n    },\n}\n</code></pre></p> Source code in <code>src/ecactus/_async_client.py</code> <pre><code>async def get_insight(\n    self, device_id: int, start_date: datetime, period_type: int\n) -&gt; JSON:\n    \"\"\"Get energy metrics and statistics of a device for a period.\n\n    Args:\n        device_id (int): The device ID to get data for.\n        start_date (datetime): The start date.\n        period_type (int): Possible value:\n\n            - `0`: 5-minute power measurement for the calendar day corresponding to `start_date` (`insightConsumptionDataDto` is `None`)\n            - `1`: (not implemented)\n            - `2`: daily energy for the calendar month corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `3`: (not implemented)\n            - `4`: monthly energy for the calendar year corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `5`: yearly energy, `start_date` is ignored (?) (`deviceRealtimeDto` is `None`)\n\n    Returns:\n        Statistics and metrics corresponding to the defined period. Example:\n            ``` py\n            {\n                \"selfPowered\": 0,\n                \"deviceRealtimeDto\": {\n                    \"solarPowerDps\": {\n                        \"1732129500\": 0.0,\n                        \"1732129800\": 0.0,\n                        ...\n                        \"1732132800\": 0.0,\n                    },\n                    \"batteryPowerDps\": {...},\n                    \"gridPowerDps\": {...},\n                    \"meterPowerDps\": {...},\n                    \"homePowerDps\": {...},\n                    \"epsPowerDps\": {...},\n                },\n                \"deviceStatisticsDto\": {\n                    \"consumptionEnergy\": 0.0,\n                    \"fromBattery\": 0.0,\n                    \"toBattery\": 0.0,\n                    \"fromGrid\": 0.0,\n                    \"toGrid\": 0.0,\n                    \"fromSolar\": 0.0,\n                    \"eps\": 0.0,\n                },\n                \"insightConsumptionDataDto\": {\n                    \"fromBatteryDps\": {\n                        \"1733976000\": 0.0,\n                        \"1733889600\": 0.0,\n                        ...\n                        \"1734062400\": 0.0,\n                    },\n                    \"toBatteryDps\": {...},\n                    \"fromGridDps\": {...},\n                    \"toGridDps\": {...},\n                    \"fromSolarDps\": {...},\n                    \"homeEnergyDps\": {...},\n                    \"epsDps\": {...},\n                    \"selfPoweredDps\": {...},\n                },\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get insight for device %d\", device_id)\n    start_ts = int(start_date.timestamp() * 1000)  # timestamp in milliseconds\n    return await self._post(\n        \"/api/client/v2/device/three/device/insight\",\n        payload={\n            \"deviceId\": device_id,\n            \"timestamp\": start_ts,\n            \"periodType\": period_type,\n        },\n    )\n</code></pre>"},{"location":"api/#ecactus.Ecos","title":"<code>Ecos(datacenter=None, url=None, access_token=None, refresh_token=None)</code>","text":"<p>Synchronous ECOS API client class.</p> <p>This class provides methods for interacting with the ECOS API, including authentication, retrieving user information, and managing homes. It uses the <code>requests</code> library to make HTTP requests to the API.</p> <p>Initialize a session with ECOS API.</p> <p>Parameters:</p> Name Type Description Default <code>datacenter</code> <code>Optional[str]</code> <p>The location of the ECOS API datacenter. Can be one of <code>CN</code>, <code>EU</code>, or <code>AU</code>. If not specified and <code>url</code> is not provided, a <code>ValueError</code> is raised.</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>The URL of the ECOS API. If specified, <code>datacenter</code> is ignored.</p> <code>None</code> <code>access_token</code> <code>Optional[str]</code> <p>The access token for authentication with the ECOS API.</p> <code>None</code> <code>refresh_token</code> <code>Optional[str]</code> <p>The refresh token for authentication with the ECOS API.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>datacenter</code> is not one of <code>CN</code>, <code>EU</code>, or <code>AU</code> and <code>url</code> is not provided.</p> Source code in <code>src/ecactus/_base.py</code> <pre><code>def __init__(\n    self,\n    datacenter: str | None = None,\n    url: str | None = None,\n    access_token: str | None = None,\n    refresh_token: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize a session with ECOS API.\n\n    Args:\n        datacenter (Optional[str]): The location of the ECOS API datacenter.\n            Can be one of `CN`, `EU`, or `AU`. If not specified and `url` is not provided,\n            a `ValueError` is raised.\n        url (Optional[str]): The URL of the ECOS API. If specified, `datacenter` is ignored.\n        access_token (Optional[str]): The access token for authentication with the ECOS API.\n        refresh_token (Optional[str]): The refresh token for authentication with the ECOS API.\n\n    Raises:\n        ValueError: If `datacenter` is not one of `CN`, `EU`, or `AU` and `url` is not provided.\n\n    \"\"\"\n    logger.info(\"Initializing session\")\n    self.access_token = access_token\n    self.refresh_token = refresh_token\n    # TODO: get datacenters from https://dcdn-config.weiheng-tech.com/prod/config.json\n    datacenters = {\n        \"CN\": \"https://api-ecos-hu.weiheng-tech.com\",\n        \"EU\": \"https://api-ecos-eu.weiheng-tech.com\",\n        \"AU\": \"https://api-ecos-au.weiheng-tech.com\",\n    }\n    if url is None:\n        if datacenter is None:\n            raise ValueError(\"url or datacenter not specified\")\n        if datacenter not in datacenters:\n            raise ValueError(\n                \"datacenter must be one of {}\".format(\", \".join(datacenters.keys()))\n            )\n        self.url = datacenters[datacenter]\n    else:  # url specified, ignore datacenter\n        self.url = url.rstrip(\"/\")  # remove trailing / from url\n</code></pre>"},{"location":"api/#ecactus.Ecos.login","title":"<code>login(email, password)</code>","text":"<p>Authenticate with the ECOS API using a provided email and password.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The user's email to use for authentication.</p> required <code>password</code> <code>str</code> <p>The user's password to use for authentication.</p> required Source code in <code>src/ecactus/_client.py</code> <pre><code>def login(self, email: str, password: str) -&gt; None:\n    \"\"\"Authenticate with the ECOS API using a provided email and password.\n\n    Args:\n        email (str): The user's email to use for authentication.\n        password (str): The user's password to use for authentication.\n\n    \"\"\"\n    logger.info(\"Login\")\n    payload = {\n        \"_t\": int(time.time()),\n        \"clientType\": \"BROWSER\",\n        \"clientVersion\": \"1.0\",\n        \"email\": email,\n        \"password\": password,\n    }\n    data = self._post(\"/api/client/guide/login\", payload=payload)\n    self.access_token = data[\"accessToken\"]\n    self.refresh_token = data[\"refreshToken\"]\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_user_info","title":"<code>get_user_info()</code>","text":"<p>Get user details.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>Details concerning the user. Example: <pre><code>{\n    \"username\": \"john.doe@acme.com\",\n    \"nickname\": \"JohnD\",\n    \"email\": \"john.doe@acme.com\",\n    \"phone\": \"\",\n    \"timeZoneId\": \"209\",\n    \"timeZone\": \"GMT-05:00\",\n    \"timezoneName\": \"America/Toronto\",\n    \"datacenterPhoneCode\": 49,\n    \"datacenter\": \"EU\",\n    \"datacenterHost\": \"https://api-ecos-eu.weiheng-tech.com\"\n}\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_user_info(self) -&gt; JSON:\n    \"\"\"Get user details.\n\n    Returns:\n        Details concerning the user. Example:\n            ``` py\n            {\n                \"username\": \"john.doe@acme.com\",\n                \"nickname\": \"JohnD\",\n                \"email\": \"john.doe@acme.com\",\n                \"phone\": \"\",\n                \"timeZoneId\": \"209\",\n                \"timeZone\": \"GMT-05:00\",\n                \"timezoneName\": \"America/Toronto\",\n                \"datacenterPhoneCode\": 49,\n                \"datacenter\": \"EU\",\n                \"datacenterHost\": \"https://api-ecos-eu.weiheng-tech.com\"\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get user info\")\n    return self._get(\"/api/client/settings/user/info\")\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_homes","title":"<code>get_homes()</code>","text":"<p>Get a list of homes.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>A list of homes. Example: <pre><code>[\n    {\n        \"homeId\": \"1234567890123456789\",\n        \"homeName\": \"SHARED_DEVICES\",\n        \"homeType\": 0,\n        \"longitude\": None,\n        \"latitude\": None,\n        \"homeDeviceNumber\": 1,\n        \"relationType\": 1,\n        \"createTime\": 946684800000,\n        \"updateTime\": 946684800000,\n    },\n    {\n        \"homeId\": \"9876543210987654321\",\n        \"homeName\": \"My Home\",\n        \"homeType\": 1,\n        \"longitude\": None,\n        \"latitude\": None,\n        \"homeDeviceNumber\": 0,\n        \"relationType\": 1,\n        \"createTime\": 946684800000,\n        \"updateTime\": 946684800000,\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_homes(self) -&gt; JSON:\n    \"\"\"Get a list of homes.\n\n    Returns:\n        A list of homes. Example:\n            ``` py\n            [\n                {\n                    \"homeId\": \"1234567890123456789\",\n                    \"homeName\": \"SHARED_DEVICES\",\n                    \"homeType\": 0,\n                    \"longitude\": None,\n                    \"latitude\": None,\n                    \"homeDeviceNumber\": 1,\n                    \"relationType\": 1,\n                    \"createTime\": 946684800000,\n                    \"updateTime\": 946684800000,\n                },\n                {\n                    \"homeId\": \"9876543210987654321\",\n                    \"homeName\": \"My Home\",\n                    \"homeType\": 1,\n                    \"longitude\": None,\n                    \"latitude\": None,\n                    \"homeDeviceNumber\": 0,\n                    \"relationType\": 1,\n                    \"createTime\": 946684800000,\n                    \"updateTime\": 946684800000,\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get home list\")\n    home_list: list[Any] = self._get(\"/api/client/v2/home/family/query\")\n    for (\n        home\n    ) in home_list:  # force the name of the home for shared devices (homeType=0)\n        if home[\"homeType\"] == \"0\":\n            home[\"homeName\"] = \"SHARED_DEVICES\"\n    return home_list\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_devices","title":"<code>get_devices(home_id)</code>","text":"<p>Get a list of devices for a home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>int</code> <p>The home ID to get devices for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>A list of devices. Example: <pre><code>[\n    {\n        \"deviceId\": \"1234567890123456789\",\n        \"deviceAliasName\": \"My Device\",\n        \"state\": 0,\n        \"batterySoc\": 0.0,\n        \"batteryPower\": 0,\n        \"socketSwitch\": None,\n        \"chargeStationMode\": None,\n        \"vpp\": False,\n        \"type\": 1,\n        \"deviceSn\": \"SHC000000000000001\",\n        \"agentId\": \"9876543210987654321\",\n        \"lon\": 0.0,\n        \"lat\": 0.0,\n        \"deviceType\": \"XX-XXX123       \",\n        \"resourceSeriesId\": 101,\n        \"resourceTypeId\": 7,\n        \"master\": 0,\n        \"emsSoftwareVersion\": \"000-00000-00\",\n        \"dsp1SoftwareVersion\": \"111-11111-11\",\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_devices(self, home_id: int) -&gt; JSON:\n    \"\"\"Get a list of devices for a home.\n\n    Args:\n        home_id (int): The home ID to get devices for.\n\n    Returns:\n        A list of devices. Example:\n            ``` py\n            [\n                {\n                    \"deviceId\": \"1234567890123456789\",\n                    \"deviceAliasName\": \"My Device\",\n                    \"state\": 0,\n                    \"batterySoc\": 0.0,\n                    \"batteryPower\": 0,\n                    \"socketSwitch\": None,\n                    \"chargeStationMode\": None,\n                    \"vpp\": False,\n                    \"type\": 1,\n                    \"deviceSn\": \"SHC000000000000001\",\n                    \"agentId\": \"9876543210987654321\",\n                    \"lon\": 0.0,\n                    \"lat\": 0.0,\n                    \"deviceType\": \"XX-XXX123       \",\n                    \"resourceSeriesId\": 101,\n                    \"resourceTypeId\": 7,\n                    \"master\": 0,\n                    \"emsSoftwareVersion\": \"000-00000-00\",\n                    \"dsp1SoftwareVersion\": \"111-11111-11\",\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get devices for home %d\", home_id)\n    return self._get(\n        \"/api/client/v2/home/device/query\", payload={\"homeId\": home_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_all_devices","title":"<code>get_all_devices()</code>","text":"<p>Get a list of all the devices.</p> <p>Returns:</p> Type Description <code>JSON</code> <p>A list of devices. Example: <pre><code>[\n    {\n        \"deviceId\": \"1234567890123456789\",\n        \"deviceAliasName\": \"My Device\",\n        \"wifiSn\": \"azerty123456789azertyu\",\n        \"state\": 0,\n        \"weight\": 0,\n        \"temp\": None,\n        \"icon\": None,\n        \"vpp\": False,\n        \"master\": 0,\n        \"type\": 1,\n        \"deviceSn\": \"SHC000000000000001\",\n        \"agentId\": \"\",\n        \"lon\": 0.0,\n        \"lat\": 0.0,\n        \"category\": None,\n        \"model\": None,\n        \"deviceType\": None,\n    },\n]\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_all_devices(self) -&gt; JSON:\n    \"\"\"Get a list of all the devices.\n\n    Returns:\n        A list of devices. Example:\n            ``` py\n            [\n                {\n                    \"deviceId\": \"1234567890123456789\",\n                    \"deviceAliasName\": \"My Device\",\n                    \"wifiSn\": \"azerty123456789azertyu\",\n                    \"state\": 0,\n                    \"weight\": 0,\n                    \"temp\": None,\n                    \"icon\": None,\n                    \"vpp\": False,\n                    \"master\": 0,\n                    \"type\": 1,\n                    \"deviceSn\": \"SHC000000000000001\",\n                    \"agentId\": \"\",\n                    \"lon\": 0.0,\n                    \"lat\": 0.0,\n                    \"category\": None,\n                    \"model\": None,\n                    \"deviceType\": None,\n                },\n            ]\n            ```\n\n    \"\"\"\n    logger.info(\"Get devices for every homes\")\n    return self._get(\"/api/client/home/device/list\")\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_realtime_device_data","title":"<code>get_realtime_device_data(device_id)</code>","text":"<p>Get power metrics of the current day until now.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get power metrics for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>Multiple metrics of the current day. Example: <pre><code>{\n    \"solarPowerDps\": {\n        \"946685100\": 0.0,\n        \"946685400\": 0.0,\n        ...\n        \"946733700\": 0.0,\n    },\n    \"batteryPowerDps\": {...},\n    \"gridPowerDps\": {...},\n    \"meterPowerDps\": {...},\n    \"homePowerDps\": {...},\n    \"epsPowerDps\": {...},\n}\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_realtime_device_data(self, device_id: int) -&gt; JSON:\n    \"\"\"Get power metrics of the current day until now.\n\n    Args:\n        device_id (int): The device ID to get power metrics for.\n\n    Returns:\n        Multiple metrics of the current day. Example:\n            ``` py\n            {\n                \"solarPowerDps\": {\n                    \"946685100\": 0.0,\n                    \"946685400\": 0.0,\n                    ...\n                    \"946733700\": 0.0,\n                },\n                \"batteryPowerDps\": {...},\n                \"gridPowerDps\": {...},\n                \"meterPowerDps\": {...},\n                \"homePowerDps\": {...},\n                \"epsPowerDps\": {...},\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get current day data for device %d\", device_id)\n    return self._post(\n        \"/api/client/home/now/device/realtime\", payload={\"deviceId\": device_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_realtime_home_data","title":"<code>get_realtime_home_data(home_id)</code>","text":"<p>Get current power for the home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>int</code> <p>The home ID to get current power for.</p> required <p>Returns:</p> Type Description <code>JSON</code> <p>Power data. Example: <pre><code>{\n    \"batteryPower\": 0,\n    \"epsPower\": 0,\n    \"gridPower\": 23,\n    \"homePower\": 1118,\n    \"meterPower\": 1118,\n    \"solarPower\": 0,\n    \"chargePower\": 0,\n    \"batterySocList\": [\n        {\n            \"deviceSn\": \"SHC000000000000001\",\n            \"batterySoc\": 0.0,\n            \"sysRunMode\": 1,\n            \"isExistSolar\": True,\n            \"sysPowerConfig\": 3,\n        }\n    ],\n}\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_realtime_home_data(self, home_id: int) -&gt; JSON:\n    \"\"\"Get current power for the home.\n\n    Args:\n        home_id (int): The home ID to get current power for.\n\n    Returns:\n        Power data. Example:\n            ``` py\n            {\n                \"batteryPower\": 0,\n                \"epsPower\": 0,\n                \"gridPower\": 23,\n                \"homePower\": 1118,\n                \"meterPower\": 1118,\n                \"solarPower\": 0,\n                \"chargePower\": 0,\n                \"batterySocList\": [\n                    {\n                        \"deviceSn\": \"SHC000000000000001\",\n                        \"batterySoc\": 0.0,\n                        \"sysRunMode\": 1,\n                        \"isExistSolar\": True,\n                        \"sysPowerConfig\": 3,\n                    }\n                ],\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get realtime data for home %d\", home_id)\n    return self._get(\n        \"/api/client/v2/home/device/runData\", payload={\"homeId\": home_id}\n    )\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_history","title":"<code>get_history(device_id, start_date, period_type)</code>","text":"<p>Get aggregated energy for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get history for.</p> required <code>start_date</code> <code>datetime</code> <p>The start date.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: daily values of the calendar month corresponding to <code>start_date</code></li> <li><code>1</code>: today daily values (<code>start_date</code> is ignored) (?)</li> <li><code>2</code>: daily values of the current month (<code>start_date</code> is ignored)</li> <li><code>3</code>: same than 2 ?</li> <li><code>4</code>: total for the current month (<code>start_date</code> is ignored)</li> </ul> required <p>Returns:</p> Type Description <code>JSON</code> <p>Data and metrics corresponding to the defined period. Example: <pre><code>{\n    \"energyConsumption\": 1221.2,\n    \"solarPercent\": 47.0,\n    \"homeEnergyDps\": {\n        \"1733112000\": 39.6,\n        \"1733198400\": 68.1,\n        \"1733284800\": 75.3,\n        ...\n        \"1735707599\": 41.3,\n    },\n}\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_history(\n    self, device_id: int, start_date: datetime, period_type: int\n) -&gt; JSON:\n    \"\"\"Get aggregated energy for a period.\n\n    Args:\n        device_id (int): The device ID to get history for.\n        start_date (datetime): The start date.\n        period_type (int): Possible value:\n\n            - `0`: daily values of the calendar month corresponding to `start_date`\n            - `1`: today daily values (`start_date` is ignored) (?)\n            - `2`: daily values of the current month (`start_date` is ignored)\n            - `3`: same than 2 ?\n            - `4`: total for the current month (`start_date` is ignored)\n\n    Returns:\n        Data and metrics corresponding to the defined period. Example:\n            ``` py\n            {\n                \"energyConsumption\": 1221.2,\n                \"solarPercent\": 47.0,\n                \"homeEnergyDps\": {\n                    \"1733112000\": 39.6,\n                    \"1733198400\": 68.1,\n                    \"1733284800\": 75.3,\n                    ...\n                    \"1735707599\": 41.3,\n                },\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get history for device %d\", device_id)\n    start_ts = int(start_date.timestamp())\n    return self._post(\n        \"/api/client/home/history/home\",\n        payload={\n            \"deviceId\": device_id,\n            \"timestamp\": start_ts,\n            \"periodType\": period_type,\n        },\n    )\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_insight","title":"<code>get_insight(device_id, start_date, period_type)</code>","text":"<p>Get energy metrics and statistics of a device for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>int</code> <p>The device ID to get data for.</p> required <code>start_date</code> <code>datetime</code> <p>The start date.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: 5-minute power measurement for the calendar day corresponding to <code>start_date</code> (<code>insightConsumptionDataDto</code> is <code>None</code>)</li> <li><code>1</code>: (not implemented)</li> <li><code>2</code>: daily energy for the calendar month corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>3</code>: (not implemented)</li> <li><code>4</code>: monthly energy for the calendar year corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>5</code>: yearly energy, <code>start_date</code> is ignored (?) (<code>deviceRealtimeDto</code> is <code>None</code>)</li> </ul> required <p>Returns:</p> Type Description <code>JSON</code> <p>Statistics and metrics corresponding to the defined period. Example: <pre><code>{\n    \"selfPowered\": 0,\n    \"deviceRealtimeDto\": {\n        \"solarPowerDps\": {\n            \"1732129500\": 0.0,\n            \"1732129800\": 0.0,\n            ...\n            \"1732132800\": 0.0,\n        },\n        \"batteryPowerDps\": {...},\n        \"gridPowerDps\": {...},\n        \"meterPowerDps\": {...},\n        \"homePowerDps\": {...},\n        \"epsPowerDps\": {...},\n    },\n    \"deviceStatisticsDto\": {\n        \"consumptionEnergy\": 0.0,\n        \"fromBattery\": 0.0,\n        \"toBattery\": 0.0,\n        \"fromGrid\": 0.0,\n        \"toGrid\": 0.0,\n        \"fromSolar\": 0.0,\n        \"eps\": 0.0,\n    },\n    \"insightConsumptionDataDto\": {\n        \"fromBatteryDps\": {\n            \"1733976000\": 0.0,\n            \"1733889600\": 0.0,\n            ...\n            \"1734062400\": 0.0,\n        },\n        \"toBatteryDps\": {...},\n        \"fromGridDps\": {...},\n        \"toGridDps\": {...},\n        \"fromSolarDps\": {...},\n        \"homeEnergyDps\": {...},\n        \"epsDps\": {...},\n        \"selfPoweredDps\": {...},\n    },\n}\n</code></pre></p> Source code in <code>src/ecactus/_client.py</code> <pre><code>def get_insight(\n    self, device_id: int, start_date: datetime, period_type: int\n) -&gt; JSON:\n    \"\"\"Get energy metrics and statistics of a device for a period.\n\n    Args:\n        device_id (int): The device ID to get data for.\n        start_date (datetime): The start date.\n        period_type (int): Possible value:\n\n            - `0`: 5-minute power measurement for the calendar day corresponding to `start_date` (`insightConsumptionDataDto` is `None`)\n            - `1`: (not implemented)\n            - `2`: daily energy for the calendar month corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `3`: (not implemented)\n            - `4`: monthly energy for the calendar year corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `5`: yearly energy, `start_date` is ignored (?) (`deviceRealtimeDto` is `None`)\n\n    Returns:\n        Statistics and metrics corresponding to the defined period. Example:\n            ``` py\n            {\n                \"selfPowered\": 0,\n                \"deviceRealtimeDto\": {\n                    \"solarPowerDps\": {\n                        \"1732129500\": 0.0,\n                        \"1732129800\": 0.0,\n                        ...\n                        \"1732132800\": 0.0,\n                    },\n                    \"batteryPowerDps\": {...},\n                    \"gridPowerDps\": {...},\n                    \"meterPowerDps\": {...},\n                    \"homePowerDps\": {...},\n                    \"epsPowerDps\": {...},\n                },\n                \"deviceStatisticsDto\": {\n                    \"consumptionEnergy\": 0.0,\n                    \"fromBattery\": 0.0,\n                    \"toBattery\": 0.0,\n                    \"fromGrid\": 0.0,\n                    \"toGrid\": 0.0,\n                    \"fromSolar\": 0.0,\n                    \"eps\": 0.0,\n                },\n                \"insightConsumptionDataDto\": {\n                    \"fromBatteryDps\": {\n                        \"1733976000\": 0.0,\n                        \"1733889600\": 0.0,\n                        ...\n                        \"1734062400\": 0.0,\n                    },\n                    \"toBatteryDps\": {...},\n                    \"fromGridDps\": {...},\n                    \"toGridDps\": {...},\n                    \"fromSolarDps\": {...},\n                    \"homeEnergyDps\": {...},\n                    \"epsDps\": {...},\n                    \"selfPoweredDps\": {...},\n                },\n            }\n            ```\n\n    \"\"\"\n    logger.info(\"Get insight for device %d\", device_id)\n    start_ts = int(start_date.timestamp() * 1000)  # timestamp in milliseconds\n    return self._post(\n        \"/api/client/v2/device/three/device/insight\",\n        payload={\n            \"deviceId\": device_id,\n            \"timestamp\": start_ts,\n            \"periodType\": period_type,\n        },\n    )\n</code></pre>"},{"location":"api/#ecactus.ApiResponseError","title":"<code>ApiResponseError(code, message)</code>","text":"<p>Raised when the API returns a non-successful response.</p> Source code in <code>src/ecactus/_exceptions.py</code> <pre><code>def __init__(self, code: int, message: str) -&gt; None:\n    self.code = code\n    self.message = message\n    super().__init__(f\"API call failed: {code} {message}\")\n</code></pre>"},{"location":"api/#ecactus.HttpError","title":"<code>HttpError(status_code, message)</code>","text":"<p>Raised when an HTTP error occurs while making an API request.</p> Source code in <code>src/ecactus/_exceptions.py</code> <pre><code>def __init__(self, status_code: int, message: str) -&gt; None:\n    self.status_code = status_code\n    self.message = message\n    super().__init__(f\"HTTP error: {status_code} {message}\")\n</code></pre>"},{"location":"api/#ecactus.InvalidJsonError","title":"<code>InvalidJsonError()</code>","text":"<p>Raised when the API returns invalid JSON.</p> Source code in <code>src/ecactus/_exceptions.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__(\"Invalid JSON\")\n</code></pre>"}]}